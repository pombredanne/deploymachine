.. warning::
   
   Alpha until configuration management tools are fully supported. At the moment kokki is partially implemented. Then puppet followed by chef.


==========================================
DEPLOYMACHINE for Python Web Applications
==========================================

DeployMachine is:

    Bootstrapping tool for provisioning servers.
    Tiny wrapper around configuration management tools such as chef, kokki, and puppet.
    Deployment framework for launching and maintaining websites.
    A slew of fabric commands for common tasks.

The documentation covers the envisioned scope of this project and notes not yet implemented features. A work in progress. C'est la vie.

INSTALLATION
============

This isn't a python package to install, though it may grow up to be one. It needs an easily accesible folder, settings files, and recommended a ``deploymachine`` virtualenv. DeployMachine is not a black box, it is necessary to read the source.

DeployMachine runs locally on OSX and Linux. It builds the current version of Ubuntu Server. Debian, Fedora and Arch support is forthcoming.

Replacing ``username`` with your development machine's username, the recommended place to clone to is:

    ``/home/username/www/lib/deploymachine/`` or ``Users/username/www/lib/deploymachine/``

Copy the example config files and customize:

    $ cp fabfile_local.example.py fabfile_local.py
    $ cp settings_deploymachine.example.py settings_deploymachine.py
    $ cp kokki-config.example.yaml kokki-config.yaml

A detailed explanation of each the available settings is forthcoming.

Place the public keys which should be granted login to the server in the ``ssh folder``:

    $ cp ~/.ssh/me.pub ~/www/lib/deploymachine/ssh/me.pub
    $ cp ~/.ssh/you.pub ~/www/lib/deploymachine/ssh/you.pub
    $ cp ~/.ssh/her.pub ~/www/lib/deploymachine/ssh/her.pub

MOTIVATION
==========
SLICEHOST PROVISIONING DOCS: http://articles.slicehost.com/ubuntu-10
DJANGO DEPLOYMENT WORKSHOP: https://github.com/jacobian/django-deployment-workshop/

Launching a high performance web application has community supported best practices. Deploymachine attempts to put these best practices into code, simplifying launching and growing the application.

Each component and setting of the server stack really should be understood inside out. However, sometimes it is prudent to install now and learn later. Deploy Machine attempts to help speed things along by means of sensible defaults. Designed with server scalability in mind, the idea is to start with one server and add or remove them as needed.

Media files and database backups are stored in the cloud and the application code and configuration is in version control. Therefore all the servers can be killed and rebuilt in a matter of minutes, with no fear of data loss.

Very little OS specific logic occurs in the DeployMachine, minus the provision step. It is the job of Kokki, Puppet, or Chef to manage the OS packages beyond bootstrapping.


CONFIGURATION MANAGEMENT
========================
DeployMachine leverages Kokki, a "System configuration management framework influenced by Chef" written in Python. More on Kokki at `http://github.com/samuel/kokki/wiki <https://github.com/samuel/kokki/wiki>`_

DeployMachine initially attempted to support both kokki and chef, but drifted towards Kokki, because of developer comfortability with Python syntax, and lack of Ruby knowledge. Now there is a growing desire to have a puppet support, and it's easy enough, a few bits are already in place. See: https://github.com/uggedal/ddw-puppet


SERVER TYPES
============
DeployMachine supports three server types: ``load balancer``, ``application node``, and ``database server``.

The current idea is to have one loadbalancer, one dbserver, and potentially multiple appnodes. However, in the case of a small app, it is probably best to start with a dbappblancer first. Or start with an appbalancer and a dbserver as I have done. One the app demands, split the loadbalncer off and scale each type individually.

.. note::

    **FUTURE FEATURE** A large app may need to add additional types of servers to the process such as a caching server, logging server, or a email server. A high traffic site will possibly need multiple database servers.

Deploymachine is intent on supporting the most common and practical cases, but not the kitchen sink.


CLOUD SERVERS
=============
DeployMachine supports Rackspace CloudServer and Cloudfiles via the Python API. `https://github.com/jacobian/python-cloudservers <https://github.com/jacobian/python-cloudservers>`_

To view info on existing Rackspace servers::

    $ cloudservers list

.. note::

    **FUTURE FEATURE** Amazon EC2 and S3 support is trivial once this feature is requested.


DNSIMPLE
========
DeployMachine harnesses the dnsimple python API for directing our domain names to our loadbalancer's ip, even after a kill/create. @@@TODO


VIRTUALBOX
==========
There is a script fabfile for booting up virtualbox instances instead of cloudservers. This is useful for testing in a developement environment. @@@TODO consider using Vagrant instead.


FIRST DEPLOYMENT
================
After private/personal configuration is complete, the general idea is as follows. From bare metal to production ready:::

    $ fab cloudservers_bootem
    $ fab root provision
    $ fab dbserver launch:dbserver
    $ fab loadbalancer launch:loadbalancer
    $ fab appnode launch:appnode

The ``fab cloudservers_bootem`` command runs the ``boot`` command for each server defined in the ``settings.py``. This will connect to the cloud providers API and boot a new machine. To list the details for your new machines, including ip addresses:

    $ cloudservers list

The ``fab root provision`` command tries to provision each server defined in the settings, skipping those which have already been provisioned. Provisioning configures core ubuntu packages, ssh, firewall, python, kokki, and root accounts. Security follows the best practice guidelines of the excellent Slicehost documentation. After provisioning is complete you can manually login to the machine using the following format:

    $ ssh -p {port} deploy@{ip}

The ``fab apptype launch:servername`` is called once for each server type and it's goal is to take the newly provisioned servers to a production ready state. The launch command tells Kokki to cook the server to the custom specification defined in defined in the ``kokki-config.yaml``. See ``kokki-config.yaml.dist`` for an example.

.. warning::

    Currently untested with all possible combinations and quantities of server types.


SCALING UP AND DOWN
===================
First start with a combined dbappbalancer, then when necessary split into an appbalancer and dbserver, followed by loadbalancer, appnode, dbserver. 

Once application growth warrants more power, increase/decrease the number of appnodes, add a cachenode, lognode, or tasknode. 

Growth beyond this can only suggest that the application is bringing in revenue. The good news is that the deploymachine has already prepared the application for further expansion by neatly separating repsonsibility between services.  

.. warning::

    Currently implemented are loadbalancer, appnode, dbserver and appbalancer.
    Not yet implemented are dbappbalacner, cachenode, lognode or tasknode. 
    The splitting process is not yet implemented, stay tuned.


ONGOING DEPLOYMENTS
===================
To add a new app node to the mix follow this three step process::
    $ fab boot appnode2
    $ fab provision appnode2
    $ fab appnode launch:appnode2

Deploy machine provides a Fabric API for maintaining your application. Commands for git, pip, supervisor, nginx, django and more are included. Take a peek inside the ``fablib`` folder for all the available options, or help extend the existing library. Domain specific commands can be imported from your personal in ``fab_local.py``. An example ``fab_local.example.py`` is included.


DEPLOYMACHINE CONFIG
=====================
Private and custom settings live in ``settings.py``::

    $ cp settings.dist.py settings.py

Read the code to become comfortable with the API, its documented quite well.


KOKKI VERSION WARNING
=====================
DeployMachine is a version behind on kokki and the recipies need an updating. The current cookbooks are in kokki-cookbooks. While the recipies are being upgraded, there are three folders.

    kcb-new: Cookbooks which only exist in the new version of kokki.
    kcb-unmodified: Existing cookbooks which will upgrade painlessly.
    kcb-modfied: Cookbooks which have been modfied, sometimes quite heavily. These cookbooks will need to be converted to the new Kokki format manually.

See ``kcb_TODO.rst`` for details.
